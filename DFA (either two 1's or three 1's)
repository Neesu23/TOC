Q2.To design a Finite Automaton (FA) that accepts all strings over the alphabet ( S = {0, 1} ) with either exactly two 1's or exactly three 1's, we can define the states and transitions as follows:

Finite Automaton Design
States:

( q_0 ): Start state (0 ones seen)
( q_1 ): One 1 seen
( q_2 ): Two 1's seen (accepting state)
( q_3 ): Three 1's seen (accepting state)
( q_4 ): More than three 1's seen (dead state)
Transitions:

From ( q_0 ):
On input '0', stay in ( q_0 ).
On input '1', go to ( q_1 ).
From ( q_1 ):
On input '0', stay in ( q_1 ).
On input '1', go to ( q_2 ).
From ( q_2 ):
On input '0', stay in ( q_2 ).
On input '1', go to ( q_3 ).
From ( q_3 ):
On input '0', stay in ( q_3 ).
On input '1', go to ( q_4 ) (dead state).
From ( q_4 ):
On input '0' or '1', stay in ( q_4 ).
Accepting States: ( q_2 ) and ( q_3 )

C++ Program to Simulate the FA

#include <iostream>
#include <string>

enum State {
    q0, // Start state
    q1, // One 1 seen
    q2, // Two 1's seen (accepting state)
    q3, // Three 1's seen (accepting state)
    q4  // Dead state (more than three 1's)
};

bool accepts(const std::string& input) {
    State currentState = q0;

    for (char c : input) {
        switch (currentState) {
            case q0:
                if (c == '0') {
                    currentState = q0; // Stay in q0
                } else if (c == '1') {
                    currentState = q1; // Move to q1
                }
                break;
            case q1:
                if (c == '0') {
                    currentState = q1; // Stay in q1
                } else if (c == '1') {
                    currentState = q2; // Move to q2
                }
                break;
            case q2:
                if (c == '0') {
                    currentState = q2; // Stay in q2
                } else if (c == '1') {
                    currentState = q3; // Move to q3
                }
                break;
            case q3:
                if (c == '0') {
                    currentState = q3; // Stay in q3
                } else if (c == '1') {
                    currentState = q4; // Move to dead state q4
                }
                break;
            case q4:
                // Stay in dead state q4 for any input
                currentState = q4;
                break;
        }
    }

    // Accept if we are in q2 or q3
    return currentState == q2 || currentState == q3;
}

int main() {
    std::string input;

    std::cout << "Enter a binary string (composed of 0s and 1s): ";
    std::cin >> input;

    if (accepts(input)) {
        std::cout << "The string is accepted by the FA." << std::endl;
    } else {
        std::cout << "The string is rejected by the FA." << std::endl;
    }

    return 0;
}
